@model HerramientaAD.Models.DiagramaERModel

@{
    ViewBag.Title = "DiagramaUML";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Concept Map</title>
    <meta name="description" content="A concept map diagram implemented with labeled links and ForceDirectedLayout." />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Copyright 1998-2019 by Northwoods Software Corporation. -->
    @*<script src="~/Scripts/go.js"></script>

        <script id="code">
        function init() {
          var $ = go.GraphObject.make;  // for conciseness in defining templates
          myDiagram =
            $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
              {
                initialAutoScale: go.Diagram.Uniform,  // an initial automatic zoom-to-fit
                contentAlignment: go.Spot.Center,  // align document to the center of the viewport
                layout:
                  $(go.ForceDirectedLayout,  // automatically spread nodes apart
                    { maxIterations: 200, defaultSpringLength: 30, defaultElectricalCharge: 100 })
              });
          // define each Node's appearance
          myDiagram.nodeTemplate =
            $(go.Node, "Auto",  // the whole node panel
              { locationSpot: go.Spot.Center },
              // define the node's outer shape, which will surround the TextBlock
              $(go.Shape, "Rectangle",
                { fill: $(go.Brush, "Linear", { 0: "rgb(254, 201, 0)", 1: "rgb(254, 162, 0)" }), stroke: "black" }),
              $(go.TextBlock,
                { font: "bold 10pt helvetica, bold arial, sans-serif", margin: 4 },
                new go.Binding("text", "text"))
            );
          // replace the default Link template in the linkTemplateMap
          myDiagram.linkTemplate =
            $(go.Link,  // the whole link panel
              $(go.Shape,  // the link shape
                { stroke: "black" }),
              $(go.Shape,  // the arrowhead
                { toArrow: "standard", stroke: null }),
              $(go.Panel, "Auto",
                $(go.Shape,  // the label background, which becomes transparent around the edges
                  {
                    fill: $(go.Brush, "Radial", { 0: "rgb(240, 240, 240)", 0.3: "rgb(240, 240, 240)", 1: "rgba(240, 240, 240, 0)" }),
                    stroke: null
                  }),
                $(go.TextBlock,  // the label text
                  {
                    textAlign: "center",
                    font: "10pt helvetica, arial, sans-serif",
                    stroke: "#555555",
                    margin: 4
                  },
                  new go.Binding("text", "text"))
              )
            );

          var datosCuadros = [];

                @{
                    foreach (HerramientaAD.com.Utilerias.ElementosDiagramaER.Cuadros cuadros in Model.Cuadros)
                    {
                        @:datosCuadros.push({ key: @cuadros.Numero, text: "@cuadros.Tabla" });
                    }
                }

          var datosRelaciones = [];

                @{
                    foreach (HerramientaAD.com.Utilerias.ElementosDiagramaER.Relaciones relaciones in Model.Relaciones)
                    {
                        @:datosRelaciones.push({ from: @relaciones.Desde, to: @relaciones.Para, text: "@relaciones.Nombre" });
                    }
                }
          // create the model for the concept map
          var nodeDataArray = datosCuadros;
          var linkDataArray = datosRelaciones;
            
          myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
        }
        </script>*@
</head>
<body onload="init()">

    <div class="jumbotron">
        <h1 class="display-3">SICOFIN</h1>
        <p class="lead">Resultados del Análisis de Base de Datos</p>
        <hr class="my-4">
    </div>

    <form>
        <fieldset>
            <legend>Filtros</legend>
            <table align="center">
                <tr>
                    <td>
                        <div class="form-group">
                            @Html.LabelFor(m => m.AreaID, "Area:")
                            @Html.DropDownListFor(m => m.AreasLista, new SelectList(Model.AreasLista, "Indice", "Texto"), "Selecciona", new { @class = "form-control" })
                        </div>
                    </td>
                    <td>
                        <div class="form-group">
                            @Html.LabelFor(m => m.AplicacionID, "Aplicación:")
                            @Html.DropDownListFor(m => m.AplicacionesLista, new SelectList(Model.AplicacionesLista, "Indice", "Texto"), "Selecciona", new { @class = "form-control" })
                        </div>
                    </td>
                    <td>
                        <div class="form-group">
                            @Html.LabelFor(m => m.BaseID, "Base de Datos:")
                            @Html.DropDownListFor(m => m.BasesLista, new SelectList(Model.BasesLista, "Indice", "Texto"), "Selecciona", new { @class = "form-control" })
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td width="370px" align="center">
                        <button type="button" class="btn btn-primary" style="width:300px" id="btnBuscar">Buscar</button>
                    </td>
                    <td width="370px" align="center">
                        <button type="button" class="btn btn-primary" style="width:300px" id="btnLimpiar">Limpiar</button>
                    </td>
                    <td width="370px" align="center"></td>
                </tr>
            </table>
        </fieldset>
    </form>
    <br />
    <div id="divdet" style="width:100%;">
        @{
            Html.RenderPartial("Diagrama");
        }
    </div>
    @*<div id="divdet" style="width:100%;">
            <div id="sample">
                <div id="myDiagramDiv" style="background-color: whitesmoke; border: solid 1px black; width: 100%; height: 700px"></div>
            </div>
        </div>*@

</body>
</html>

<script src="~/Scripts/jquery-3.3.1.js"></script>
<script>

    function limpiarfiltros() {
        $("#AreasLista").empty;
        $("#AreasLista")[0].selectedIndex = 0;
        $("#AplicacionesLista").empty;
        $("#AplicacionesLista")[0].selectedIndex = 0;
        $("#BasesLista").empty;
        $("#BasesLista")[0].selectedIndex = 0;
    }

    function ActualizaDiagrama(idbd) {
        $.ajax({
            type: "POST",
            url: "/DiagramaER/ActualizarDiagrama",
            data: { BaseDeDatosID: idbd },
            success: function (viewHTML) {
                $("#divdet").empty;
                $("#divdet").html(onload = init());
            },
            error: function (errorData) { console.log("Request Failed: " + errorData); }
        });
    }

    $(document).ready(function() {

        $("#AreasLista").change(function() {
            var a = $("#AreasLista Option:Selected").val();
            var url = '@Url.Content("~/")' + "DiagramaER/ActualizarAplicaciones";
            var ddlsource = "#AreasLista Option:Selected";
            $.getJSON(url, { areaid: $(ddlsource).val() }, function (data) {
                var items = '';
                $("#AplicacionesLista").empty;
                $.each(data, function (i, row) {
                    items += "<option value='" + row.Value + "'>" + row.Text + "</option>";
                });
                $("#AplicacionesLista").html(items);
            }).fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("Request Failed: " + err);
            });
        });

        $("#AplicacionesLista").change(function () {
            var app = $("#AplicacionesLista Option:Selected").val();
            var url = '@Url.Content("~/")' + "DiagramaER/ActualizarBase";
            $.getJSON(url, { Filtro: "BD", Tipo: "BaseDatos", AplicacionID: app }, function (data) {
                var items = '';
                $("#BasesLista").empty;
                $.each(data, function (i, row) {
                    items += "<option value='" + row.Value + "'>" + row.Text + "</option>";
                });
                $("#BasesLista").html(items);
            }).fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("Request Failed: " + err);
            });
        });

        $('#btnLimpiar').click(function () {

            limpiarfiltros();
        });

        $('#btnBuscar').click(function () {
            var idbd = $("#BasesLista Option:Selected").val();
            myDiagram.div = null;
            ActualizaDiagrama(idbd)
        });
    });
</script>

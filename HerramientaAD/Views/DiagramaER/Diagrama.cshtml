@model HerramientaAD.Models.DiagramaERModel

<div id="sample">
    <div id="myDiagramDiv" style="background-color: whitesmoke; border: solid 1px black; width: 100%; height: 700px"></div>
</div>

<script src="~/Scripts/go.js"></script>
<script id="code">
    var datosCuadros = [];
    var datosRelaciones = [];

    var nodeDataArray = datosCuadros;
    var linkDataArray = datosRelaciones;

     @{
                foreach (HerramientaAD.com.Utilerias.ElementosDiagramaER.Cuadros cuadros in Model.Cuadros)
                {
                    @:datosCuadros.push({ key: @cuadros.Numero, text: "@cuadros.Tabla" });

                }
            }

            @{
                foreach (HerramientaAD.com.Utilerias.ElementosDiagramaER.Relaciones relaciones in Model.Relaciones)
                {
                    @:datosRelaciones.push({ from: @relaciones.Desde, to: @relaciones.Para, text: "@relaciones.Nombre" });
                } 
            }



    var firstModel;
    function init() {

        var $ = go.GraphObject.make;  // for conciseness in defining templates
        myDiagram =
            $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
                {
                    initialAutoScale: go.Diagram.Uniform,  // an initial automatic zoom-to-fit
                    contentAlignment: go.Spot.Center,  // align document to the center of the viewport
                    layout:
                        $(go.ForceDirectedLayout,  // automatically spread nodes apart
                            { maxIterations: 200, defaultSpringLength: 30, defaultElectricalCharge: 100 })
                });
        // define each Node's appearance
        myDiagram.nodeTemplate =
            $(go.Node, "Auto",  // the whole node panel
                { locationSpot: go.Spot.Center },
                // define the node's outer shape, which will surround the TextBlock
                $(go.Shape, "Rectangle",
                    { fill: $(go.Brush, "Linear", { 0: "rgb(254, 201, 0)", 1: "rgb(254, 162, 0)" }), stroke: "black" }),
                $(go.TextBlock,
                    { font: "bold 10pt helvetica, bold arial, sans-serif", margin: 4 },
                    new go.Binding("text", "text"))
            );
        // replace the default Link template in the linkTemplateMap

        myDiagram.linkTemplate =
            $(go.Link,  // the whole link panel
                $(go.Shape,  // the link shape
                    { stroke: "black" }),
                $(go.Shape,  // the arrowhead
                    { toArrow: "standard", stroke: null }),
                $(go.Panel, "Auto",
                    $(go.Shape,  // the label background, which becomes transparent around the edges
                        {
                            fill: $(go.Brush, "Radial", { 0: "rgb(240, 240, 240)", 0.3: "rgb(240, 240, 240)", 1: "rgba(240, 240, 240, 0)" }),
                            stroke: null
                        }),
                    $(go.TextBlock,  // the label text
                        {
                            textAlign: "center",
                            font: "10pt helvetica, arial, sans-serif",
                            stroke: "#555555",
                            margin: 4
                        },
                        new go.Binding("text", "text"))
                )
            );
        
        if (firstModel == null) {

            alert("primera vez")
            nodeDataArray = datosCuadros;
            linkDataArray = datosRelaciones;



            myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);

            datosCuadros = [];
            datosRelaciones = [];

            firstModel = 1;

        }

        else {

            alert("segunda vez")

            nodeDataArray = [
                { key: "Alpha", color: "lightblue" },
                { key: "Beta", color: "lightblue" },
                { key: "Gamma", color: "lightgreen" },
                { key: "Delta", color: "lightgreen" }
            ];


            linkDataArray = [
                    { from: "Alpha", to: "Beta" },
                    { from: "Gamma", to: "Delta" }
                ];


            
            myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
            firstModel = null;

        }
        
        
    }
</script>